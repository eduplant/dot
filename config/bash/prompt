#!/usr/bin/env bash

generateStatusNetwork()
{
	local colorLocal="$(tput sgr0)"
	local colorNetwork="$(tput setaf 14)"
	local colorReset="$(tput sgr0)"

	local characterLocal='•'
	local characterNetwork='⇄'

	local formatString='\001%s\002%s\001%s\002'

	if [ "${SSH_TTY}" ]
	then
		printf "${formatString}" \
			"${colorNetwork}" \
			"${characterNetwork}" \
			"${colorReset}"
	else
		printf "${formatString}" \
			"${colorLocal}" \
			"${characterLocal}" \
			"${colorReset}"
	fi
}

generateStatusIdentity()
{
	local color="$(tput setaf 13)"
	local colorReset="$(tput sgr0)"

	local formatString='\001%s\002%s\001%s\002'

	local identity="$(id -u -n)"

	if [[ ${identity} == ${ERICPREF_LOCALUSER} ]]
	then
		# Print nothing
		:
	else
		printf "${formatString}" \
			"${color}" \
			"${identity}"'@' \
			"${colorReset}"
	fi
}

generateGitCommitted()
{
	local colorOK="$(tput setaf 10)"
	local colorNotOK="$(tput setaf 9)"
	local colorReset="$(tput sgr0)"

	local characterCommitted='✓'
	local characterUncommitted='∆'

	if git diff --exit-code &>/dev/null 2>&1 && \
		git diff --cached --exit-code >/dev/null 2>&1 && \
		git ls-files --exclude-standard --others 2>&1
	then
		printf '\001%s\002%s\001%s\002' \
			"${colorOK}" \
			"${characterCommitted}" \
			"${colorReset}"
	else
		printf '\001%s\002%s\001%s\002' \
			"${colorNotOK}" \
			"${characterUncommitted}" \
			"${colorReset}"
	fi
}

generateGitAheadBehindRemote()
{
	local colorOK="$(tput setaf 10)"
	local colorNotOK="$(tput setaf 9)"
	local colorReset="$(tput sgr0)"

	local characterAhead='↖'
	local characterBehind='↙'

	local remoteTracked="$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")"
	local gitAheadBehindRaw=$(git rev-list --left-right --count \
		"${remoteTracked}"...$(git branch --show-current) \
		2>/dev/null)
	local gitAhead=$(printf '%s' "${gitAheadBehindRaw}" | \
		cut -d $'\t' -f 2)
	local gitBehind=$(printf '%s' "${gitAheadBehindRaw}" | \
		cut -d $'\t' -f 1)

	if [ "${gitAhead:-0}" -gt 0 ]
	then
		printf '\001%s\002%s%s\001%s\002' \
			"${colorNotOK}" \
			"${characterAhead}" \
			"${gitAhead}" \
			"${colorReset}"
	else
		# Print nothing if not ahead
		:
	fi

	if [ "${gitBehind:-0}" -gt 0 ]
	then
		printf '\001%s\002%s%s\001%s\002' \
			"${colorNotOK}" \
			"${characterBehind}" \
			"${gitBehind}" \
			"${colorReset}"
	else
		# Print nothing if not behind
		:
	fi
}

generateStatusGit()
{
	local formatString='(%s%s) '

	# Check to see if git exists and we're in a repo
	if which git >/dev/null 2>&1 && \
		git rev-parse --git-dir >/dev/null 2>&1
	then
		local comm="$(generateGitCommitted)"
		local abr="$(generateGitAheadBehindRemote)"

		if [ "${abr}" != '' ]
		then
			printf "${formatString}" \
				"${comm}" \
				' '"${abr}"
		else
			printf "${formatString}" \
				"${comm}" \
				''
		fi
	else
		# Print nothing if no git
		:
	fi
}

generatePromptString()
{
	if [ "${ERICPREF_ACCENT_COLOR_TERM}" ]
	then
		local accentColor="${ERICPREF_ACCENT_COLOR_TERM}"
	else
		local accentColor="$(tput sgr0)"
	fi
	local colorReset="$(tput sgr0)"

	#printf 'accentColor: \001%s\002test\001%s\002\n' "${accentColor}" "${colorReset}"

	# Use argument to generate PS1, PS2, etc
	local promptString="$1"
	if [ "${ERICPREF_HOSTNAME}" ]
	then
		local hostname="${ERICPREF_HOSTNAME}"
	else
		local hostname="$(hostname -s | tr -d '\n')"
	fi
	local basedir="$(basename $(pwd))"

	local formatString='%s %s\001%s\002%s\001%s\002 %s\001%s\002»\001%s\002 '

	generateStatusGit()
	{
		:
	}

	# Prepare the base string
	case "${promptString}" in
		PS1)
			printf "${formatString}" \
				"$(generateStatusNetwork)" \
				"$(generateStatusIdentity)" \
				"${accentColor}" \
				"${hostname}" \
				"${colorReset}" \
				"$(generateStatusGit)" \
				"${accentColor}" \
				"${colorReset}"
			;;
		PS2)
			printf ' \001%s\002»\001%s\002 ' \
				"${accentColor}" \
				"${colorReset}"
			;;
		*)
			# Do nothing
			:
			;;
	esac
}

PS1='$(generatePromptString PS1)'
PS2='$(generatePromptString PS2)'
